#!/bin/bash
#
# Copyright (c) 2019 Baidu.com, Inc. All Rights Reserved
#
# Auther:Abel
# Date:2019/08/29
# Brief:
#   runit
# Globals:
#   PORT
# Returns:
#   succ:0
#   fail:1

# trap
trap 'handle_signal' SIGINT
trap 'handle_signal' SIGTERM

# environment
PORT=8080
DATE_FORMAT="+%Y-%m-%d|%H:%M:%S"
color=('0' '31' '32' '33')
number=1

# variable
procfile=""
envfile=""

#######################################
# Brief:
#   usage
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
function usage() {
    echo 'Usage: runit [-c] [-f procfile|Procfile] [-e envfile|.env]'
    echo 'Default port :8080'
    echo '-c, --check: Check the format of the procfile and envfile is right'
    echo '-f, --file: Procfile'
    echo '-e, --env: Envfile'
    echo '-h, --help: Help'
}

#######################################
# Brief:
#   Verify envfile
# Globals:
#   None
# Arguments:
#   envfile
# Returns:
#   succ:0
#   fail:1
#######################################
function verify_envfile() {
    local envfile="$1"
    local variable=0

    [[ ! -f "${envfile}" ]] && return 1
    while read line; do
        if echo "${line}" | grep -v "="; then
            error_info "no match"
            continue
        fi
        processname="${line%%=*}"
        value="${line#*=}"
        echo "${processname}" | grep "[^0-9a-zA-Z_]" && variable=1
        echo "${value}" | grep -qE "[[:space:]]" && error_info "value_have_space" && variable=1
    done < <(grep -vE "^[[:space:]]*#" "${envfile}" | grep -v "^$")
    return ${variable}
}

#######################################
# Brief:
#   Verify procfile
# Globals:
#   None
# Arguments:
#   procfile
# Returns:
#   succ:0
#   fail:1
#######################################
function verify_procfile() {
    local procfile="$1"
    local variable=0

    [[ ! -f "${procfile}" ]] && return 1
    while read line ; do
        if echo "${line}" | grep -v ":"; then
            error_info "no_colon_command"
            continue
        fi
        processname="${line%%:*}"
        value="${line#*:}"
        echo "${processname}" | grep -q [^a-zA-Z_] && error_info "invalid_char" && variable=1
    done < <(grep -vE "^[[:space:]]*#" "${procfile}")
    return ${variable}
}

# echo the error information
function error_info() {
    errorinfo="$1"
    echo "${errorinfo}"
}

# echo the log information
function log() {
    printf "\033[$3m`date +%H:%M:%S` %-6s| " "$1"
    tput sgr0
    echo "$2"
    return 0
}

#######################################
# Brief:
#   Run the command
# Globals:
#   Port
# Arguments:
#   None
# Returns:
#   succ:0
#   fail:1
#######################################
function run_command() {
    local pid=$!
    local color="${color[$number]}"
    local port=$(echo "$2" |grep -e "\$PORT")

    bash -c "$2" > >(
        while read result; do
            log "$1" "${result}" "${color}"
        done
    ) 2>&1 &

    local output=$(eval echo \"$2\")
    log "$1" "${output} started with pid ${pid}" "${color}"

    app_run_pid="${app_run_pid} ${pid}"

    [[ $? -ne 0 ]] && return 1
    [[ -n "${port}" ]] && PORT=$((${PORT} + 1))
    let number++
    return 0
}

#######################################
# Brief:
#   Load the envfile
# Globals:
#   None
# Arguments:
#   envfile
# Returns:
#   succ:0
#   fail:1
#######################################
function load_env_file() {
    set -a
    local env_lists="$1"
    for flag in $(echo "${env_lists}"); do
        [[ -f "${flag}" ]] && source "${flag}"
    done
    return 0
}

#######################################
# Brief:
#   Run the envfile
# Globals:
#   None
# Arguments:
#   procfile
# Returns:
#   succ:0
#   fail:1
#######################################
function run_procfile() {
    local procfile="$1"
    while read line; do
        if echo "${line}" | grep -qv ":"; then
            error_info "no colon command"
            continue
        fi
        local processname="${line%%:*}"
        local value="${line#* }"
        [[ -n "${processname}" ]] && [[ -n "${value}" ]] && run_command "${processname}" "${value}"
        [[ $? -ne 0 ]] && return 1
    done < <(grep "" "${procfile}" | grep -vE "[[:space:]]*#" | grep -v "^$" )
    wait
    return 0
}

#######################################
# Brief:
#   Trap SIGINT && SIGTERM
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
function handle_signal() {
    run_process=`jobs -p`
    echo "SIGINT received"
    echo "sending SIGTERM to all processes"
    for i in ${run_process[@]}
    do
        pkill -9 -P $i
    done
    for j in ${run_process[@]}
    do
        kill -9 $j
    done
}

#####################################
#Brief:
#  main procedure
#Globals:
#  procfile envfile
#Agruments:
#  None
#Returns:
#  None
#####################################
function main() {
    local check=false
    while getopts "f:e:ch" flag
    do
      case ${flag} in
        c) check=true;;
        f) procfile="${OPTARG}";;
        e) envfile="${OPTARG}";;
        *) usage;;
      esac
    done

    if ${check}; then
        if [[ -n "${procfile}" ]]; then
            verify_procfile "${procfile}"
            [[ $? -ne 0 ]] && exit 1
        else
            error_info "The procfile is null"
            exit 1
        fi

        envfile=${envfile:-"./.env"}
        verify_envfile  "${envfile}"
        [[ $? -ne 0 ]] && exit 1
    else
        envfile=${envfile:-"./.env"}
        load_env_file "${envfile}"
        [[ $? -ne 0 ]] && exit 1

        procfile=${procfile:-"./Procfile"}
        run_procfile "${procfile}"
        [[ $? -ne 0 ]] && exit 1
    fi
    exit 0
}

main "$@"
